from __future__ import annotations
from os import getcwd
from os.path import dirname, realpath, sep
from itertools import zip_longest as zip
from importlib import import_module
from typing import Iterable, Sequence, Callable, NewType, Literal, Self, Any
import enum

dirpath = realpath(dirname(__file__)).removeprefix(getcwd()).lstrip(sep).replace(sep, ".")
relpath = lambda module_name: f'{dirpath}.{module_name}' if dirpath else module_name

arraylist = import_module(relpath('arraylist'))
bases = import_module(relpath('bases'))
console = import_module(relpath('console'))
gadget = import_module(relpath('gadget'))
jsdict = import_module(relpath('jsdict'))

def is_number(_) -> bool: ...
def is_integer(_) -> bool: ...
def apchInt(_) -> int | float: ...

class cmdl: ...
class Numeric: ...
Numeric = NewType('Numeric', [int, float])

class array(Sequence):
    @property
    def length(self) -> int: ...
    def __init__(self, *values) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int | slice) -> Self: ...
    def __setitem__(self, index: int, value) -> None: ...
    def __iter__(self) -> None: ...
    def __next__(self) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __add__(self, values: Iterable) -> array: ...
    def __sub__(self, values: Iterable) -> array: ...
    def reverse(self) -> Self: ...
    def reversed(self) -> array: ...
    def append(self, *args) -> Self: ...
    def prepend(self, *args) -> Self: ...
    def concat(self, *args) -> Self: ...
    def splice(self, index: int, delcount: int, *args) -> Self: ...
    def extend(self, index: int, delcount: int, *args) -> Self: ...
    def join(self, sep: str = '') -> str: ...
    def shift(self, index: int = 0) -> Any: ...
    def pop(self, index: int = -1) -> Any: ...
    def filter(self, callback:Callable) -> array: ...
    def any(self, callback: Callable) -> bool: ...
    def all(self, callback: Callable) -> bool: ...
    def reduce(self, callback: Callable[[Numeric], Numeric], init: Numeric = ...) -> Numeric: ...
    def copy(self) -> array: ...
    def each(self, callback: Callable | type) -> Self: ...

class slider(array):
    @property
    def size(self) -> int: ...
    @size.setter
    def size(self, value:int) -> None: ...
    @property
    def cull_behavior(self) -> Literal['ahead', 'back']: ...
    @cull_behavior.setter
    def cull_behavior(self, value: Literal['ahead', 'back']) -> None: ...
    def __init__(self, *values, size: int = ..., cull_behavior: Literal['ahead', 'back'] = 'ahead') -> None: ...

    def __push__(self, values:Iterable, orient:Literal['ahead', 'back']='back') -> Self: ...
    def __cull__(self): ...
    def __add__(self, values:Iterable) -> Self: ...
    def copy(self) -> slider: ...
    def append(self, *args) -> Self: ...
    def prepend(self, *args) -> Self: ...
    def concat(self, *args) -> Self: ...
    def splice(self, index: int, delcount: int, *args) -> Self: ...
    def extend(self, index: int, delcount: int, *args) -> Self: ...

class String(str):
    @property
    def length(self) -> int: ...
    def __init__(self, _: Any) -> None: ...
    def parentheless(self, sep: str | tuple[str, ...] = ',', symbols: tuple[str, str] = ('(', ')'), strip: str = None) -> list: ...

class Enum(enum.Enum):
    def __get__(self, object: None, cls: enum.EnumType) -> Any: ...

class Console:
    @property
    def mode(self) -> Literal['normal', 'debug']: ...
    @mode.setter
    def mode(self, value: Literal['normal', 'debug']) -> None: ...
    def __new__(cls, *args, **kwargs) -> Self: ...
    def __init__(self) -> None: ...
    def log(self, *text: str, sep: str = ' ', end: str = '\n', mode: Literal['normal', 'debug'] = 'normal') -> str: ...
    def info(self, *text: str, sep: str = ' ', end: str = '\n', mode: Literal['normal', 'debug'] = 'normal') -> tuple[str, str]: ...
    def debug(self, object: Any, end: str = '\n', mode: Literal['normal', 'debug'] = 'normal') -> Any: ...

class Gadget:
    @staticmethod
    def multinput(txt: str, sep: str = None, forceFormat: type = ..., autoFormat: bool = True): ...
    @staticmethod
    def formatter(command: str, split: str = None, strip: str = None) -> cmdl: ...
    @staticmethod
    def argsplit(cmd: str) -> tuple[str, ...]: ...
    @staticmethod
    def visualize(ntuple: tuple) -> str: ...
    @staticmethod
    def scaler(length: int, reversed: bool = False) -> int: ...
    @staticmethod
    def getGeometry(window, width: int = 1280, height: int = 720, output: Literal['string', 'metadata'] = 'string') -> str | object: ...
    @staticmethod
    def round(number: str | int | float, format: str = '.00') -> float: ...
    @staticmethod
    def timeformat(sec: int | float, type: Literal['string', 'set'] = 'string') -> str | tuple: ...

class json(dict):
    def __init__(self, *args, **kwargs) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value) -> None: ...

array = arraylist.array
slider = arraylist.slider
String = bases.String
Enum = bases.Enum
Console = console.Console
cmdl = gadget.cmdl
Gadget = gadget.Gadget
json = jsdict.json
is_number = gadget.is_number
is_integer = gadget.is_integer
apchInt = gadget.apchInt

console = Console()